/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'checkstyle'
    id 'jacoco'
    id 'idea'
}

java {
    toolchain {
        // force java version 14
        languageVersion = JavaLanguageVersion.of(14)
    }
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
}

dependencies {
    implementation 'org.jetbrains:annotations:20.1.0'
    implementation 'org.junit.jupiter:junit-jupiter:5.4.2'
    testImplementation(platform('org.junit:junit-bom:5.7.0'))
    testImplementation 'org.junit.jupiter:junit-jupiter'

    // Use JUnit test framework.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:29.0-jre'

    // Common mark library
    implementation 'org.commonmark:commonmark-ext-heading-anchor:0.17.0'

    // Picocli library
    implementation 'info.picocli:picocli:4.6.1'

    // Toml library
    implementation 'org.tomlj:tomlj:1.0.0'

    // Html beautifier
    implementation 'org.jsoup:jsoup:1.12.1'

    implementation 'commons-io:commons-io:2.8.0'

    implementation 'org.apache.commons:commons-collections4:4.4'

    // jinjava
    implementation group: 'com.hubspot.jinjava', name: 'jinjava', version: '2.4.3'

    implementation "org.slf4j:slf4j-simple:1.7.30"
}

application {
    applicationName = 'ssg'
    mainClass = 'gla.App'
}

applicationDistribution.from("./../README.md") {
    into "."
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(Checkstyle) {
    // check style disable for test
    checkstyleTest.enabled false
    ignoreFailures = false
    maxWarnings = 0

    // report activate in xml and html
    reports {
        html.enabled true
    }

    // source file to check
    checkstyleMain {
        'src/main/java/'
    }
    checkstyleTest {
        'src/test/java'
    }
}


test {
    useJUnitPlatform()
    maxParallelForks = Runtime.runtime.availableProcessors()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    sourceDirectories.from files(sourceSets.main.allJava.srcDirs)
    reports {
        xml.enabled true
        csv.enabled true
    }

}

jacocoTestCoverageVerification {
    // threshold
    violationRules {
        failOnViolation = true
        rule {
            limit {
                minimum = 0.7
            }
        }
    }
}

