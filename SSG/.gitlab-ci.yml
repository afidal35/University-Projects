image: gradle:6.8-jdk15

variables:
  DIST_DIR: "app/build/distributions"
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  JACOCO_REPORT: "app/build/reports/jacoco/test/"
  JACOCO_XML: "$JACOCO_REPORT/jacocoTestReport.xml"
  JACOCO_CSV: "$JACOCO_REPORT/jacocoTestReport.csv"
  COBERTURA_XML: "app/build/cobertura.xml"

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle

.only-default: &only-default
  only:
    - merge_requests
    - master

.cache-pull: &cache-pull
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - app/build
      - .gradle
stages:
  - build
  - test
  - visualize
  - tag
  - binaries
  - upload
  - deploy

build:
  stage: build
  script:
    - ./gradlew --build-cache assemble
  <<: *only-default
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - app/build
      - .gradle

checkstyle:
  stage: test
  script: ./gradlew checkstyleMain checkstyleTest
  <<: *only-default
  <<: *cache-pull
  artifacts:
    when: always
    paths:
      - app/build/reports/checkstyle

unit_test:
  stage: test
  script: ./gradlew test
  <<: *only-default
  <<: *cache-pull
  artifacts:
    when: always
    reports:
      junit: app/build/test-results/test/**/TEST-*.xml


integration_test:
  stage: test
  <<: *only-default
  <<: *cache-pull
  script:
    - apt-get update -y
    - apt-get install -y software-properties-common
    - add-apt-repository ppa:deadsnakes/ppa
    - apt-get install -y python3.9 python3-pip
    - pip3 install pipenv
    - cd ./app/src/test/integrations
    - pipenv install
    - pipenv run pytest . -q --junitxml=report.xml
  artifacts:
    when: always
    reports:
      junit: app/src/test/integrations/report.xml

coverage:
  stage: test
  script:
    - ./gradlew jacocoTestReport
  <<: *only-default
  <<: *cache-pull
  artifacts:
    when: always
    paths:
      - $JACOCO_REPORT

coverage_verif:
  stage: test
  script:
    - ./gradlew jacocoTestCoverageVerification
  <<: *only-default
  <<: *cache-pull

coverage-display:
  stage: visualize
  image: haynes/jacoco2cobertura:1.0.4
  script:
    - python /opt/cover2cover.py $JACOCO_XML src/main/java > $COBERTURA_XML
    - python /opt/source2filename.py $COBERTURA_XML
    - awk -F"," '{ instructions += $4 + $5; covered += $5 } END { print covered, "/", instructions, " instructions covered"; print 100*covered/instructions, "% covered" }' $JACOCO_CSV
  <<: *only-default
  <<: *cache-pull
  needs: [ "coverage" ]
  dependencies:
    - coverage
  artifacts:
    when: always
    reports:
      cobertura: $COBERTURA_XML

create-tag:
  stage: tag
  allow_failure: true
  only:
    - master
  script:
    - git config user.email "${GITLAB_USER_EMAIL}"
    - git config user.name "${GITLAB_USER_NAME}"
    - git remote remove another-tag-origin
    - git remote add another-tag-origin https://oauth2:${GITLAB_ACCESS_TOKEN}@gitlab.com/${CI_PROJECT_PATH}
    - git fetch --tags
    - chmod +x ./scripts/bump.sh
    - ./scripts/bump.sh minor

binaries:
  stage: binaries
  script:
    - export PACKAGE_VERSION=$CI_COMMIT_TAG
    - export BINARY="ssg-$PACKAGE_VERSION.tar"
    - echo $BINARY
    - echo $PACKAGE_VERSION
    - ./gradlew distTar
    - mv -v $DIST_DIR/ssg.tar $DIST_DIR/$BINARY
  only:
    - tags
  artifacts:
    paths:
      - $DIST_DIR

upload:
  stage: upload
  image: curlimages/curl:latest
  only:
    - tags
  script:
    - export PACKAGE_VERSION=$CI_COMMIT_TAG
    - export BINARY="ssg-$PACKAGE_VERSION.tar"
    - export PACKAGE_REGISTRY_URL="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/ssg/${PACKAGE_VERSION}"
    - echo $BINARY
    - echo $PACKAGE_VERSION
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${DIST_DIR}/${BINARY} ${PACKAGE_REGISTRY_URL}/${BINARY}

release_job:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  only:
    - tags
  <<: *cache-pull
  script:
    - export PACKAGE_VERSION=$CI_COMMIT_TAG
    - export BINARY="ssg-$PACKAGE_VERSION.tar"
    - export PACKAGE_REGISTRY_URL="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/ssg/${PACKAGE_VERSION}"
    - echo $PACKAGE_VERSION
    - echo $BINARY
    - |
      release-cli create --name "Release $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG \
        --assets-link "{\"name\":\"${BINARY}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${BINARY}\"}"

